{"version":3,"sources":["utils/template.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","reportWebVitals.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","MyGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","className","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","runAttackAction","attackBoss","attackTxn","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","fetchNFTMetadata","provider","txn","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ac9310b.chunk.js","sourcesContent":["\nconst CONTRACT_ADDRESS = '0x97B2F1d72968869632E19832F18aEEC71A8607ae';\n\n/*\n * Add this method and make sure to export it on the bottom!\n */\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../utils/template';\nimport MyGame from '../../utils/MyGame.json';\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n\n       setMintingCharacter(true);\n       console.log('Minting character in progress...');\n       const mintTxn = await gameContract.mintCharacterNFT(characterId);\n       await mintTxn.wait();\n       console.log(mintTxn);\n       /*\n        * Hide our loading indicator when minting is finished\n        */\n       setMintingCharacter(false);\n    } catch (error) {\n    console.warn('MintCharacterAction Error:', error);\n    /*\n     * If there is a problem, hide the loading indicator as well\n     */\n    setMintingCharacter(false);    }\n  };\n\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        MyGame.abi,\n        signer\n      );\n\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\nuseEffect(() => {\n  const getCharacters = async () => {\n    try {\n      console.log('Getting contract characters to mint');\n\n      const charactersTxn = await gameContract.getAllDefaultCharacters();\n      console.log('charactersTxn:', charactersTxn);\n\n      const characters = charactersTxn.map((characterData) =>\n        transformCharacterData(characterData)\n      );\n\n      setCharacters(characters);\n    } catch (error) {\n      console.error('Something went wrong fetching characters:', error);\n    }\n  };\n\n  /*\n   * Add a callback method that will fire when this event is received\n   */\n  const onCharacterMint = async (sender, tokenId, characterIndex) => {\n    console.log(\n      `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n    );\n\n    /*\n     * Once our character NFT is minted we can fetch the metadata from our contract\n     * and set it in state to move onto the Arena\n     */\n    if (gameContract) {\n      const characterNFT = await gameContract.checkIfUserHasNFT();\n      console.log('CharacterNFT: ', characterNFT);\n      setCharacterNFT(transformCharacterData(characterNFT));\n    }\n  };\n\n  if (gameContract) {\n    getCharacters();\n\n    /*\n     * Setup NFT Minted Listener\n     */\n    gameContract.on('CharacterNFTMinted', onCharacterMint);\n  }\n\n  return () => {\n    /*\n     * When your component unmounts, let;s make sure to clean up this listener\n     */\n    if (gameContract) {\n      gameContract.off('CharacterNFTMinted', onCharacterMint);\n    }\n  };\n}, [gameContract]);\n\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  \n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {/* Only show this when there are characters in state */}\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n    </div>\n  );\n};\n\n\n\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../utils/template';\nimport MyGame from '../../utils/MyGame.json';\nimport './Arena.css';\n\n/*\n * We pass in our characterNFT metadata so we can a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\nconst [gameContract, setGameContract] = useState(null);\nconst [boss, setBoss] = useState(null);\n/*\n * We are going to use this to add a bit of fancy animations during attacks\n */\nconst [attackState, setAttackState] = useState('');\n\nconst runAttackAction = async () => {\n  try {\n    if (gameContract) {\n      setAttackState('attacking');\n      console.log('Attacking boss...');\n      const attackTxn = await gameContract.attackBoss();\n      await attackTxn.wait();\n      console.log('attackTxn:', attackTxn);\n      setAttackState('hit');\n    }\n  } catch (error) {\n    console.error('Error attacking boss:', error);\n    setAttackState('');\n  }\n};\n\n\n   useEffect(() => {\n     const fetchBoss = async () => {\n       const bossTxn = await gameContract.getBigBoss();\n       console.log('Boss:', bossTxn);\n       setBoss(transformCharacterData(bossTxn));\n     };\n\n     /*\n      * Setup logic when this event is fired off\n      */\n     const onAttackComplete = (newBossHp, newPlayerHp) => {\n       const bossHp = newBossHp.toNumber();\n       const playerHp = newPlayerHp.toNumber();\n\n       console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n       /*\n        * Update both player and boss Hp\n        */\n       setBoss((prevState) => {\n         return { ...prevState, hp: bossHp };\n       });\n\n       setCharacterNFT((prevState) => {\n         return { ...prevState, hp: playerHp };\n       });\n     };\n\n     if (gameContract) {\n       fetchBoss();\n       gameContract.on('AttackComplete', onAttackComplete);\n     }\n\n     /*\n      * Make sure to clean up this event when this component is removed\n      */\n     return () => {\n       if (gameContract) {\n         gameContract.off('AttackComplete', onAttackComplete);\n       }\n     };\n   }, [gameContract]);\n\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        MyGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\nreturn (\n  <div className=\"arena-container\">\n    {/* Boss */}\n    {boss && (\n      <div className=\"boss-container\">\n        {/* Add attackState to the className! After all, it's just class names */}\n        <div className={`boss-content ${attackState}`}>\n          <h2>🔥 {boss.name} 🔥</h2>\n          <div className=\"image-content\">\n            <img className=\"boss\" src={boss.imageURI} alt={`Boss ${boss.name}`} />\n            <div className=\"health-bar\">\n              <progress value={boss.hp} max={boss.maxHp} />\n              <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"attack-container\">\n          <button className=\"cta-button\" onClick={runAttackAction}>\n            {`💥 Attack ${boss.name}`}\n          </button>\n        </div>\n      </div>\n    )}\n\n    {/* Replace your Character UI with this */}\n    {characterNFT && (\n      <div className=\"players-container\">\n        <div className=\"player-container\">\n          <h2>Your Character</h2>\n          <div className=\"player\">\n            <div className=\"image-content\">\n              <h2>{characterNFT.name}</h2>\n              <img\n                src={characterNFT.imageURI}\n                alt={`Character ${characterNFT.name}`}\n              />\n              <div className=\"health-bar\">\n                <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n              </div>\n            </div>\n            <div className=\"stats\">\n              <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n            </div>\n          </div>\n        </div>\n      </div>\n    )}\n  </div>\n);\n};\n\nexport default Arena;\n","import React, { useEffect, useState} from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena from './Components/Arena';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './utils/template';\nimport MyGame from './utils/MyGame.json';\nimport LoadingIndicator from './Components/LoadingIndicator/index';\n\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account:', account);\n        setCurrentAccount(account);\n      } else {\n        console.log('No authorized account found');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n const renderContent = () => {\n\n  \n\n  if (!currentAccount) {\n    return (\n      <div className=\"connect-wallet-container\">\n        <img\n          src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n          alt=\"Monty Python Gif\"\n        />\n        <button\n          className=\"cta-button connect-wallet-button\"\n          onClick={connectWalletAction}\n        >\n          Connect Wallet To Get Started\n        </button>\n      </div>\n    );\n  } else if (currentAccount && !characterNFT) {\n    return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\t\n\t/*\n\t* If there is a connected wallet and characterNFT, it's time to battle!\n\t*/\n  } else if (currentAccount && characterNFT) {\n    return <Arena characterNFT={characterNFT} />;\n  }\n}; \n\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  \n\n  useEffect(() => {\n     setIsLoading(true);\n     checkIfWalletIsConnected();\n  }, []);\n\n useEffect(() => {\n   /*\n    * The function we will call that interacts with out smart contract\n    */\n   const fetchNFTMetadata = async () => {\n     console.log('Checking for Character NFT on address:', currentAccount);\n\n     const provider = new ethers.providers.Web3Provider(window.ethereum);\n     const signer = provider.getSigner();\n     const gameContract = new ethers.Contract(\n       CONTRACT_ADDRESS,\n       MyGame.abi,\n       signer\n     );\n\n       const characterNFT = await gameContract.checkIfUserHasNFT();\n    if (characterNFT.name) {\n      console.log('User has character NFT');\n      setCharacterNFT(transformCharacterData(characterNFT));\n    }\n\n    /*\n     * Once we are done with all the fetching, set loading state to false\n     */\n    setIsLoading(false);\n\n\n     const txn = await gameContract.checkIfUserHasNFT();\n     if (txn.name) {\n       console.log('User has character NFT');\n       setCharacterNFT(transformCharacterData(txn));\n     } else {\n       console.log('No character NFT found');\n     }\n        console.log(txn);\n\n   };\n\n   /*\n    * We only want to run this, if we have a connected wallet\n    */\n   if (currentAccount) {\n     console.log('CurrentAccount:', currentAccount);\n     fetchNFTMetadata();\n   }\n }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">🗡️Konoha Fighters🗡️</p>\n          <p className=\"sub-text\">Team up to protect the Ninja Metaverse!</p>\n          {/* This is where our button and image code used to be!\n           *\tRemember we moved it into the render method.\n           */}\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}